<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>置顶文章</title>
    <link href="/blog/%E7%BD%AE%E9%A1%B6%E6%96%87%E7%AB%A0/"/>
    <url>/blog/%E7%BD%AE%E9%A1%B6%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>01-React的基本使用</title>
    <link href="/React/01.%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/React/01.%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="React-基础"><a href="#React-基础" class="headerlink" title="React 基础"></a>React 基础</h2><p>React 是一个构建用户界面的库 ， 但是整个生态一起构成了一个框架</p><h2 id="react-特点"><a href="#react-特点" class="headerlink" title="react 特点"></a>react 特点</h2><ul><li>声明式 UI</li><li>组件化</li></ul><h2 id="react-脚手架"><a href="#react-脚手架" class="headerlink" title="react 脚手架"></a>react 脚手架</h2><p>脚手架：为了保证各施工过程顺利进行而搭建的工作平台</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li>导入 <code>react</code> 和 <code>react-dom</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> form <span class="hljs-string">&#x27;react&#x27;</span> <span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDom</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>创建 <code>react</code> 元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> title = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;hello react&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>渲染 <code>react</code> 元素到页面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">ReactDom</span>.<span class="hljs-title function_">render</span>(title, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h2><p>解决 <code>createElemenet</code> 繁琐不简洁、不直观等缺点问题</p><p><code>JSX</code> 是 <code>JavaScript XML</code> 的简写，表示了在 <code>js</code> 代码中写 <code>XML</code> 格式的代码</p><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDom</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span><br><span class="hljs-keyword">const</span> element = &lt;div id=&quot;box&quot;&gt;233&lt;div&gt;<br>//渲染<br>ReactDom.render(element,document.getElementById(&#x27;root&#x27;))<br></code></pre></td></tr></table></figure><p><strong>注意点</strong></p><ul><li>只有在脚手架中才能使用 <code>jsx</code> 语法</li><li><code>jsx</code> 语法必须只有一个根节点</li><li><code>class</code> 属性 另起名为 <code>className</code></li></ul><h3 id="幽灵节点"><a href="#幽灵节点" class="headerlink" title="幽灵节点"></a>幽灵节点</h3><p><code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code> 相当于创建 <code>JSX</code> 的根节点 ，不会渲染任何的内容</p><p>且在编写 <code>JSX</code> 代码时，最好加上 <code>()</code> 来表示是一个整体</p><h3 id="插入表达式"><a href="#插入表达式" class="headerlink" title="插入表达式"></a>插入表达式</h3><blockquote><p>可以使用 <code>&#123;&#125;</code> 来使用 js 表达式</p></blockquote><ul><li><p>基本使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;ydh&#x27;</span> <span class="hljs-keyword">const</span> age = <span class="hljs-number">22</span> <span class="hljs-keyword">const</span> title = (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  姓名:&#123;name&#125; ,年龄:&#123;age&#125;</span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure></li><li><p>可以访问对象的属性 <code>&#123;obj.name&#125;</code></p></li><li><p>可以访问数组的下标 <code>&#123;arr[0]&#125;</code></p></li><li><p>可以使用三元运算符 <code>&#123;age&gt;18?&#39;1&#39;:&#39;0&#39;&#125;</code></p></li><li><p>可以调用方法 <code>&#123;template()&#125;</code></p></li><li><p>可以调用 <code>JSX</code> 本身 <code>&#123;element&#125;</code></p></li><li><p>JSX 中的注释 <code>&#123;/**/&#125;</code></p></li></ul><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> loading = <span class="hljs-literal">true</span> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">if</span>(loading)&#123; <span class="hljs-keyword">return</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>加载中<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-keyword">return</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>页面显示<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125; &#125; <span class="hljs-keyword">const</span> element =<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;render()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="hljs-title class_">ReactDom</span>.<span class="hljs-title function_">render</span>(element,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><ul><li><code>if/else</code></li><li>三元有运算符</li><li>逻辑运算符</li></ul><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> list = [<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>] <br><span class="hljs-keyword">const</span> element = (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>列表的渲染<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;list.map((item,index)=&gt;(</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><h3 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h3><ul><li><p>行内样式</p><p><code>&lt;h1 style=&#123;&#123;backgroundColor:bgColor,width:400,height="400"&#125;&#125;</code></p><p>外边括号表示是一个动态的 css 样式，里边的括号表示是一个对象</p></li><li><p>引入 <code>css</code> 样式文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;.css&quot;</span> <span class="hljs-keyword">const</span> dv =<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>注意</strong> ： 动态使用 <code>className</code></p><ol><li><p>可以使用动态字符串拼接解决</p><p><code>className = &#123;</code>${isRed ? ‘red’ : ‘ ‘ }<code>&#125;</code></p></li><li><p>可以使用数组拼接</p><p><code>classArr.join(&#39; &#39;)</code></p><p>进阶版</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">classNames</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)<br>    .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> obj[key])<br>    .<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>classnames</code> 第三方库包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> classnames <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;classnames&quot;</span> &lt;h1 className =<br>&#123;<span class="hljs-title function_">classnames</span>(<span class="hljs-string">&#x27;box&#x27;</span>,&#123;<span class="hljs-attr">red</span>:isRed,<span class="hljs-attr">pink</span>:isPink&#125;)&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-React组件</title>
    <link href="/React/02.%E7%BB%84%E4%BB%B6/"/>
    <url>/React/02.%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h2 id="组件的基本介绍"><a href="#组件的基本介绍" class="headerlink" title="组件的基本介绍"></a>组件的基本介绍</h2><ul><li>组件是 <code>React</code> 中最基本的内容，使用 <code>React</code> 就是在使用组件</li><li>组件表示页面中的部分功能</li><li>多个组件可以实现完整的页面功能</li><li>组件的特点：可以复用、独立</li></ul><h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><p><code>React</code> 创建组件的两种方式</p><p><strong>函数组件</strong></p><ol><li>组件的名字必须是大写开头，为了区别 <code>html</code> 原有的标签</li><li>组件必须返回一段结构</li><li>如果组件不想渲染任何的内容 ， 也需要返回 null</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs react">function Hello()&#123;<br>    return &lt;div&gt;Hello comp&lt;/div&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以使用箭头函数定义函数组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs react">const Hello = ()=&gt; &lt;div&gt;Hello comp&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><strong>类组件</strong></p><blockquote><p>class 类的知识扩展</p><p>ES5的传统构造函数</p><p>function Teacher(name,age){</p><p>​this.name &#x3D; name</p><p>​this.age &#x3D; age</p><p>}</p><p>Teacher.prototype.sayHi &#x3D; function(){</p><p>​console.log(‘hello’+this.name)</p><p>}</p><p>class Teacher {</p><p>​constructor(name,age){</p><p>​this.name &#x3D; name</p><p>​this.age &#x3D; age</p><p>​}</p><p>​sayHi(){</p><pre><code class="hljs">     console.log(&#39;hello&#39;+this.name)</code></pre><p>​}</p><p>}</p><p>ES6 的 class 类本质上是一个语法糖</p></blockquote><p>继承扩展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,gender</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender<br>    &#125;<br>    <span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;eat&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chinese</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">super</span>(name,gender)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">skin</span> = <span class="hljs-string">&#x27;yellow&#x27;</span><br>    &#125;<br>    <span class="hljs-title function_">pq</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;pq&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> a1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>(<span class="hljs-string">&#x27;yuadh&#x27;</span>,<span class="hljs-number">22</span>)<br>a1.<span class="hljs-title function_">eat</span>()<br></code></pre></td></tr></table></figure><h2 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h2><ol><li>类组件必须继承 <code>React.Component</code></li><li>必须提供 <code>render</code> 方法</li><li><code>render</code> 方法必须由返回值，需要返回一段结构</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs react">class Hello extends Component&#123;<br>    render()&#123;<br>        return &lt;div&gt;Hello&lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="组件的单独文件"><a href="#组件的单独文件" class="headerlink" title="组件的单独文件"></a>组件的单独文件</h2><p><strong>注意：</strong> 组件必须首字母大写</p><ul><li>在 <code>componenets</code> 文件夹下创建 <code>js或者jsx</code> 文件写 <code>react</code> 组件</li><li>在相应的文件中导出该组件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Hello</span><br></code></pre></td></tr></table></figure><h2 id="两种组件创建的区别"><a href="#两种组件创建的区别" class="headerlink" title="两种组件创建的区别"></a>两种组件创建的区别</h2><p>有状态组件和无状态组件</p><ul><li>函数组件又叫做 <code>无状态组件</code> 函数组件是不能自己提供数据的</li><li>类组件又叫做 <code>有状态组件</code> 类组件可以自己提供数据，，组件内部的状态</li><li>状态 (state) 即组件的私有数据，当组件的状态发送了改变，页面结构也就发送了改变</li><li>函数组件是没有状态的，之负责页面的展示 性能比较高</li><li>类组件有自己的状态，负责更新 UI ，只要类组件的数据发生了的改变，UI 就会发生更新</li><li>在复杂的项目中，一般都是由函数组件和类组件共同配合来完成的</li></ul><h2 id="类组件提供状态"><a href="#类组件提供状态" class="headerlink" title="类组件提供状态"></a>类组件提供状态</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs react">import ReactDOM from &quot;react-dom&quot;<br>import &#123; Component &#125; from &quot;react&quot;<br><br>class App extends Component&#123;<br>  constructor()&#123;<br>      super()<br>      this.state = &#123;<br>          msg:&quot;hello&quot;,<br>          count:100<br>      &#125;<br>  &#125;<br>  render()&#123;<br>    return (<br>      &lt;div&gt;<br>         &lt;h1&gt;XXX&lt;/h1&gt;<br>          &lt;div&gt;&#123;this.state.msg&#125;&lt;/div&gt;<br>          &lt;div&gt;&#123;this.state.count&#125;&lt;/div&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>状态语法糖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs react">import ReactDOM from &quot;react-dom&quot;<br>import &#123; Component &#125; from &quot;react&quot;<br><br>class App extends Component&#123;<br>state = &#123;<br>        msg:&quot;hello&quot;,<br>        count:100<br>    &#125;<br>  render()&#123;<br>    return (<br>      &lt;div&gt;<br>         &lt;h1&gt;XXX&lt;/h1&gt;<br>          &lt;div&gt;&#123;this.state.msg&#125;&lt;/div&gt;<br>          &lt;div&gt;&#123;this.state.count&#125;&lt;/div&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>注册事件 </p><p><code>React</code> 注册事件与 <code>DOM</code> 的事件语法类似</p><p>语法 ： <code>on+事件命 = &#123;事件处理程序&#125;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs react">class App extends React.Component&#123;<br>    render()&#123;<br>        return <br>        &lt;div&gt;<br>        &lt;button onClick = &#123;this.handleClick&#125;&gt;&lt;/button&gt;<br>        &lt;/div&gt;<br>    &#125;<br>    handleClick(e)&#123;//事件对象<br>        e.preventDefault()//阻止默认行为<br>        console.log(&#x27;hi&#x27;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-React的this指向</title>
    <link href="/React/03.this%E6%8C%87%E5%90%91/"/>
    <url>/React/03.this%E6%8C%87%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> length = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">length</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>)<br>    &#125;<br>&#125;<br>obj.<span class="hljs-title function_">sayHi</span>()<br><span class="hljs-keyword">const</span> fn = obj.<span class="hljs-title function_">sayHi</span>()<br><span class="hljs-title function_">fn</span>()<br><span class="hljs-keyword">var</span> arr = [obj.<span class="hljs-property">sayHi</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>arr[<span class="hljs-number">0</span>]()<br></code></pre></td></tr></table></figure><p>打印得结果为 </p><ul><li>20this指向的是obj，因为调用者是obj</li><li>10    this指向的是window，因为调用者是window</li><li>3      this指向的是arr，因为调用者是arr</li></ul><h2 id="react中的this指向"><a href="#react中的this指向" class="headerlink" title="react中的this指向"></a>react中的this指向</h2><p>在类组件中 <code>render</code> 的 <code>this</code> 指向当前组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs react">render() &#123;<br>  const onClick = this.handleClick<br>  onClick()<br>  return (<br>    &lt;div&gt;<br>      &lt;h1&gt;XXX&lt;/h1&gt;<br>      &lt;div&gt;&#123;this.state.msg&#125;&lt;/div&gt;<br>      &lt;div&gt;&#123;this.state.count&#125;&lt;/div&gt;<br>      &lt;button onClick=&#123;this.handleClick&#125;&gt;点击事件&lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br>handleClick() &#123;<br>  console.log(&#x27;233&#x27; + this)<br>&#125;<br></code></pre></td></tr></table></figure><p>函数调用中的 this 因为没有定义所以是 <code>undefined</code> , 不知道谁是调用者</p><p><strong>解决方案1</strong></p><p>把函数调用包裹在箭头函数中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs react">const onClick = () =&gt; this.handleClick()<br>onClick()<br></code></pre></td></tr></table></figure><p><strong>解决方案2</strong></p><p>绑定 <code>this</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs react">const onClick = this.handleClick.bind(this)<br>onClick()<br></code></pre></td></tr></table></figure><p><strong>解决方案3</strong></p><p>class新语法：类实例语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs react">handleClick = ()=&gt;&#123;<br>    console.log(this)<br>&#125;<br></code></pre></td></tr></table></figure><p>此处是把函数写在了实例上，需要配合插件。。直接使用 <code>js</code> 可能无效</p><h2 id="react修改状态"><a href="#react修改状态" class="headerlink" title="react修改状态"></a>react修改状态</h2><ul><li>组件中的状态是可变的</li><li>语法 <code>this.setState(&#123;&#125;)</code> ，这个方法可以修改state同时可以更新UI</li><li>不要直接修改 <code>state</code> 中的值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs react">render() &#123;<br>   return (<br>     &lt;div&gt;<br>       &lt;h1&gt;XXX&lt;/h1&gt;<br>       &lt;div&gt;&#123;this.state.msg&#125;&lt;/div&gt;<br>       &lt;div&gt;&#123;this.state.count&#125;&lt;/div&gt;<br>       &lt;button onClick=&#123;this.handleClick&#125;&gt;点击事件&lt;/button&gt;<br>     &lt;/div&gt;<br>   )<br> &#125;<br> handleClick = () =&gt; &#123;<br>   this.setState(&#123;<br>     count: this.state.count + 1,<br>   &#125;)<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="和vue数据更新的区别"><a href="#和vue数据更新的区别" class="headerlink" title="和vue数据更新的区别"></a>和vue数据更新的区别</h2><p><strong>vue：</strong> vue2会通过 es5 的语法 <code>Object.defineProperty()</code> vue3 会通过 <code>es6</code> 的 <code>proxy</code> 语法 检测到数据的变化，当数据变化的时候，vue 会帮助我们自动更新 DOM </p><p><strong>react：</strong> react并不会去监听数据的变化，所以直接修改数据，react中的 DOM 不会自动更新，但是 react 提供了一个方法 <code>setState()</code> ，它可以做  1.修改 <code>state</code> 的值 2.更新 DOM</p><h2 id="react核心理念"><a href="#react核心理念" class="headerlink" title="react核心理念"></a>react核心理念</h2><p><strong>状态不变</strong></p><ul><li>不能直接修改 <code>react</code> 中的 <code>state</code> 的值，而是提供新的值覆盖</li><li>直接修改 <code>react</code> 中的 <code>state</code> 的值，组件不会更新</li></ul><p>同样的在修改对象类型的数据时，也是采用相同的方法覆盖其需要修改的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs react">clickFn = ()=&gt;&#123;<br>    this.setState(&#123;<br>        count:1,<br>        msg:&#x27;world&#x27;,<br>        user:&#123;<br>            ...this.state.user,<br>            name:&#x27;ls&#x27;<br>        &#125;,<br>        list:this.state.list.fitter(item=&gt;item!==&#x27;ls&#x27;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04-React的受控组件</title>
    <link href="/React/04.%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/"/>
    <url>/React/04.%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h2><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>HTML</code> 中表单元素是可输入的，即表单用户并维护着自己的可变状态</li><li>当时在 <code>react</code> 中，可变状态通常是保存在 <code>state</code> 中的，并且要求通过 <code>setState</code> 进行修改</li><li><code>react</code> 中将 <code>state</code> 中的数据与表单元素的 <code>value</code> 值绑定到了一起， 由 <code>state</code> 值来控制表单元素的值</li><li>受控组件：value 值受到了 <code>react</code> 控制的表单元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs react">render()&#123;<br>    return (<br>    &lt;div&gt;<br>        &lt;input<br>                type = &quot;text&quot;<br>                value = &#123;this.state.msg&#125;<br>                onChange = &#123;this.handleChange&#125;&gt;<br>            &lt;/input&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br>handleChange = ()=&gt;&#123;<br>this.setState(&#123;<br>        msg:e.target.value<br>    &#125;)                    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多个受控组件封装"><a href="#多个受控组件封装" class="headerlink" title="多个受控组件封装"></a>多个受控组件封装</h2><p>除了文本类型外文字域、下拉框和复选框等都可以使用 <code>react</code> 的受控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs react">handleChange = (e)=&gt;&#123;<br>    const &#123;name,type,checked,value&#125;  = e.target<br>    this.setState(&#123;<br>        [name]:type === &#x27;checkbox&#x27;?checked:value<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> 此处使用到了 <code>es6</code> 的特性</p><p>在 <code>es6</code> 之前，属性的名字必须是指定的好的，属性的值可以是任意形式的表达式</p><p>在 <code>es6</code> 之后，属性名可以是任意形式的表达式，但是需要使用 <code>[]</code> 包裹</p><h2 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h2><p><strong>ref 使用步骤</strong></p><ol><li>通过 <code>React.createRef()</code> 创建一个 <code>ref</code>  </li><li>通过 <code>ref=&#123;this.xxxRef&#125;</code> 关联给某个 <code>DOM</code> 对象或者组件</li><li>通过 <code>this.xxxRef.current</code> 属性就可以获取到对应的 <code>dom</code> 元素</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs react">const textRef = React.reateRef()<br>render()&#123;<br>    return (<br>    &lt;div&gt;<br>            &lt;input type=&quot;text&quot; ref=&#123;this.textRef&#125;&gt;<br>        &lt;button<br>                onClick = &#123;this.handle&#125;&gt;<br>            &lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br>handle = ()=&gt;&#123;<br>console.log(this.textRef.current.value)                 <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="评论列表案例"><a href="#评论列表案例" class="headerlink" title="评论列表案例"></a>评论列表案例</h2><ol><li>展示评论列表功能</li><li>清空评论的功能</li><li>发表新的评论的功能</li><li>删除评论功能</li><li>没有更多评论的处理</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs react">import React from &#x27;react&#x27;<br>import ReactDOM from &#x27;react-dom&#x27;<br><br>/* <br>  评论列表案例<br><br>  comments: [<br>    &#123; id: 1, name: &#x27;jack&#x27;, content: &#x27;沙发！！！&#x27; &#125;,<br>    &#123; id: 2, name: &#x27;rose&#x27;, content: &#x27;板凳~&#x27; &#125;,<br>    &#123; id: 3, name: &#x27;tom&#x27;, content: &#x27;楼主好人&#x27; &#125;<br>  ]<br>*/<br><br>import &#x27;./index.css&#x27;<br><br>class App extends React.Component &#123;<br>  // constructor() &#123;<br>  //   super()<br>  // &#125;<br><br>  state = &#123;<br>    list: [<br>      &#123; id: 1, name: &#x27;y&#x27;, comment: &#x27;代码练习太少了&#x27; &#125;,<br>      &#123; id: 2, name: &#x27;d&#x27;, comment: &#x27;外包接单没法接&#x27; &#125;,<br>      &#123; id: 3, name: &#x27;h&#x27;, comment: &#x27;写起东西无从下手&#x27; &#125;,<br>      &#123; id: 4, name: &#x27;s&#x27;, comment: &#x27;资源较少，没有经验&#x27; &#125;,<br>    ],<br>    user: &#x27;&#x27;,<br>    content: &#x27;&#x27;,<br>  &#125;<br>  render() &#123;<br>    return (<br>      &lt;div className=&quot;app&quot;&gt;<br>        &lt;div&gt;<br>          &lt;input<br>            onChange=&#123;this.handleChange&#125;<br>            className=&quot;user&quot;<br>            name=&quot;user&quot;<br>            type=&quot;text&quot;<br>            placeholder=&quot;请输入评论人&quot;<br>            value=&#123;this.state.user&#125;<br>          /&gt;<br>          &lt;br /&gt;<br>          &lt;textarea<br>            onChange=&#123;this.handleChange&#125;<br>            className=&quot;content&quot;<br>            name=&quot;content&quot;<br>            cols=&quot;30&quot;<br>            rows=&quot;10&quot;<br>            value=&#123;this.state.content&#125;<br>            placeholder=&quot;请输入评论内容&quot;<br>          /&gt;<br>          &lt;br /&gt;<br>          &lt;button onClick=&#123;this.sendComment&#125;&gt;发表评论&lt;/button&gt;<br>          &lt;button onClick=&#123;this.clearComment&#125;&gt;清空评论&lt;/button&gt;<br>        &lt;/div&gt;<br>        &#123;this.state.list.length !== 0 ? (<br>          &lt;ul&gt;<br>            &#123;this.state.list.map((item) =&gt; &#123;<br>              return (<br>                &lt;li key=&#123;item.id&#125;&gt;<br>                  &lt;h3&gt;评论人：&#123;item.name&#125;&lt;/h3&gt;<br>                  &lt;p&gt;评论内容：&#123;item.comment&#125;&lt;/p&gt;<br>                  &lt;button<br>                    onClick=&#123;() =&gt; &#123;<br>                      this.deleteComment(item.id)<br>                    &#125;&#125;<br>                  &gt;<br>                    删除评论<br>                  &lt;/button&gt;<br>                &lt;/li&gt;<br>              )<br>            &#125;)&#125;<br>          &lt;/ul&gt;<br>        ) : (<br>          &lt;div className=&quot;no-comment&quot;&gt;暂无评论，快去评论吧~&lt;/div&gt;<br>        )&#125;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>  handleChange = (e) =&gt; &#123;<br>    const &#123; name, value &#125; = e.target<br>    this.setState(&#123;<br>      [name]: value,<br>    &#125;)<br>  &#125;<br>  clearComment = () =&gt; &#123;<br>    this.setState(&#123;<br>      list: [],<br>    &#125;)<br>  &#125;<br>  deleteComment = (id) =&gt; &#123;<br>    const newList = this.state.list.filter((item) =&gt; item.id !== id)<br>    this.setState(&#123;<br>      list: newList,<br>    &#125;)<br>  &#125;<br>  sendComment = () =&gt; &#123;<br>    if (this.state.user.length === 0 || this.state.content.length === 0) &#123;<br>      alert(&#x27;信息不完整&#x27;)<br>      return<br>    &#125;<br>    const add = &#123;<br>      id: Date.now(),<br>      name: this.state.user,<br>      comment: this.state.content,<br>    &#125;<br>    this.setState(&#123;<br>      list: [add, ...this.state.list],<br>      user: &#x27;&#x27;,<br>      content: &#x27;&#x27;,<br>    &#125;)<br>  &#125;<br>&#125;<br><br>// 渲染组件<br>ReactDOM.render(&lt;App /&gt;, document.getElementById(&#x27;root&#x27;))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06-案例级同级组件通信</title>
    <link href="/React/06.%E6%A1%88%E4%BE%8B%E5%8F%8A%E5%90%8C%E7%BA%A7%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <url>/React/06.%E6%A1%88%E4%BE%8B%E5%8F%8A%E5%90%8C%E7%BA%A7%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><ul><li>Error Lens 错误信息提示</li><li>react es6 快捷键代码模板</li></ul><h2 id="Todo编写流程"><a href="#Todo编写流程" class="headerlink" title="Todo编写流程"></a>Todo编写流程</h2><ul><li>列表展示</li><li>删除任务</li><li>修改任务状态</li><li>添加任务功能</li><li>双击修改任务</li><li>底部任务个数显示</li><li>清空任务</li><li>切换任务赛选</li><li>全选和取消全选</li></ul><h2 id="兄弟组件通信"><a href="#兄弟组件通信" class="headerlink" title="兄弟组件通信"></a>兄弟组件通信</h2><ul><li>将共享状态提升到最近的公共父组件中，由公共父组件管理这个状态</li><li>思想：<strong>状态提升</strong></li><li>公共父组件职责：提供共享状态、提供操作共享状态的方法</li><li>要通信的子组件只需通过 <code>props</code> 接收状态或操作状态的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">\\a - 调用父组件的方法，传递数据<br>&lt;button onClick = &#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">say</span>&#125;&gt;&lt;/button&gt;<br>say = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">say</span>(<span class="hljs-string">&#x27;Hi,here&#x27;</span>)<br>&#125;<br>\\b - 接收数据<br>&lt;div&gt;<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">msg</span>&lt;/div&gt;<br>\\index - 父组件提供共享状态、操作共享状态方法<br>state=&#123;<br>    <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br>&lt;A say=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">changeMsg</span>&#125;/&gt;<span class="hljs-comment">//传递数据，调用方法</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">B</span> <span class="hljs-attr">msg</span>=<span class="hljs-string">&#123;this.state.msg&#125;/</span>&gt;</span></span><span class="hljs-comment">//接收数据</span><br>changeMsg = <span class="hljs-function">(<span class="hljs-params">msg</span>)=&gt;</span>&#123;<span class="hljs-comment">//提供共享状态、方法</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        msg<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="context跨组件"><a href="#context跨组件" class="headerlink" title="context跨组件"></a>context跨组件</h2><p>实现思路</p><ul><li><p>调用 <code>React.createContext()</code> 创建 <code>Provider</code> 和 <code>Consumer</code> 两个组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123;<span class="hljs-title class_">Provider</span>,<span class="hljs-title class_">Consumer</span>&#125; = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">creatContext</span>()<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>Provider</code> 组件组为父节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Provider</span>&gt;<br>&lt;div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">son</span>/&gt;</span></span><br>    &lt;div&gt;    <br>&lt;/<span class="hljs-title class_">Provider</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>设置 <code>value</code> 属性，表示要传递的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Provider</span> value = &#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">color</span>&#125;&gt;<br>&lt;div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">son</span>/&gt;</span></span><br>    &lt;div&gt;    <br>&lt;/<span class="hljs-title class_">Provider</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>调用 <code>Consumer</code> 组件接收数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Consumer</span>&gt;  <br>&#123;<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:data&#125;&#125;</span>&gt;</span>data<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>)&#125;    </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Consumer</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>注意：Provider和Consumer</strong> 的使用是一对的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导出 Consumer </span><br><span class="hljs-keyword">export</span> &#123;<span class="hljs-title class_">Consumer</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入 Consumer</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Consumer</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./URL&#x27;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>07-React的Props和插槽</title>
    <link href="/React/07.Props%E5%92%8C%E6%8F%92%E6%A7%BD/"/>
    <url>/React/07.Props%E5%92%8C%E6%8F%92%E6%A7%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="children属性"><a href="#children属性" class="headerlink" title="children属性"></a>children属性</h2><ul><li><code>children属性</code> ：表示该组件的子节点，只要组件有子节点，<code>props</code> 就有该属性</li><li><code>children</code> 属性与普通的 <code>props</code> 一样，值可以是任意值</li></ul><p>可以充当 <code>vue</code> 里 <strong>插槽</strong> 的作用</p><p>组件-插槽 : <code>Dialog.js</code></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">return</span> (<br>&lt;<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-keyword">this</span>.props.title(<span class="hljs-string">&#x27;默认值&#x27;</span>)&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-keyword">this</span>.props.children&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>)<br></code></pre></td></tr></table></figure><p>父组件-使用 : <code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Dialog</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;(value)</span>=&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>值为:&#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>&#125;&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Dialog</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><h2 id="propTypes校验"><a href="#propTypes校验" class="headerlink" title="propTypes校验"></a>propTypes校验</h2><p>对传递的数据类型进行校验</p><ol><li>导入 <code>prop-types</code> 包</li><li>使用 <code>组件名.propTypes = &#123;&#125;</code> 来给组件添加校验规则</li><li>校验规则通过 <code>PropTypes</code> 对象来指定</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> propTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span><br><br><span class="hljs-title class_">Son</span>.<span class="hljs-property">propTypes</span> = &#123;<br>    <span class="hljs-attr">money</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>,<br>    <span class="hljs-attr">list</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">array</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>约束规则</strong></p><ol><li>常见类型： <code>array</code> 、<code>bool</code> 、<code>func</code> 、<code>number</code> 、<code>object</code> 、<code>string</code></li><li>React元素类型 ：<code>element</code></li><li>必填项：<code>isRequired</code></li><li>特定结构的对象：<code>shape(&#123;&#125;)</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Son</span>.<span class="hljs-property">propTypes</span> = &#123;<br>    <span class="hljs-attr">money</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>.<span class="hljs-property">isRequired</span>,<br>    <span class="hljs-attr">list</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">aray</span>,<br>    <span class="hljs-attr">car</span>:<span class="hljs-title class_">Proptypes</span>.<span class="hljs-title function_">shape</span>(&#123;<br>        <span class="hljs-attr">brand</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span><br>        <span class="hljs-attr">price</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>.<span class="hljs-property">isRequired</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>组件 - 传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">state = &#123;<br>    <span class="hljs-attr">car</span>:&#123;<br>        <span class="hljs-attr">brand</span>:<span class="hljs-string">&#x27;abc&#x27;</span>,<br>        <span class="hljs-attr">price</span>:<span class="hljs-number">100</span><br>    &#125;<br>&#125;<br>&lt;<span class="hljs-title class_">Son</span> money=&#123;<span class="hljs-number">100</span>&#125; list&#123;[]&#125; car = &#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">car</span>&#125;&gt;&lt;/<span class="hljs-title class_">Son</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="props默认值"><a href="#props默认值" class="headerlink" title="props默认值"></a>props默认值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Son</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>    <span class="hljs-attr">money</span>:<span class="hljs-number">0</span>,<br>    <span class="hljs-attr">list</span>:[]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h2><p>&#x2F;&#x2F;实例成员：通过实例调用的属性或方法</p><p>&#x2F;&#x2F;静态成员：通过类或者构造函数本身才能访问的属性和方法</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>08-React的生命周期</title>
    <link href="/React/08.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/React/08.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li><strong>意义</strong> ：组件的生命周期有助于理解组件的运行方式、完成更复杂的功能、分析组件错误原因等</li><li>组件的生命周期：从组件被创建到挂载到页面中运行，再到组件不用时卸载的过程</li><li>钩子函数的作用：为开发人员在不同阶段操作组件提供子时机</li><li>只有 <strong>类组件</strong>  才有生命周期</li></ul><p><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">React lifecycle methods diagram (wojtekmaj.pl)</a></p><p><img src="/.%5Creact%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p><h2 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h2><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>constructor</td><td>创建组件时，最新执行</td><td>1.初始化state 2.创建Ref等</td></tr><tr><td>render</td><td>每次组件渲染都会触发</td><td>渲染 UI （注意不能调用 setState()）</td></tr><tr><td>componentDidMount</td><td>组件挂载 (完成DOM渲染) 后</td><td>1.发送网络请求 2.DOM操作</td></tr></tbody></table><p>除了 <code>render()</code> 其它都执行一次 </p><h2 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h2><p>有三种情况会导致 <code>render()</code> 的触发更新</p><ul><li><code>New props</code> : 来自父组件的数据更新</li><li><code>setState</code> :  对自己的数据的更新</li><li><code>forceUpdate</code> : 强制跟 UI</li></ul><p>钩子函数  <code>componentDidUpdate</code>   触发执行顺序</p><ol><li>触发父组件的 <code>render</code> 函数 </li><li>触发子组件的 <code>render</code> 函数</li><li>触发子组件的 <code>componentDidUpdate</code>  函数</li><li>触发父组件的 <code>componentDidUpdate</code>  函数</li></ol><h2 id="卸载阶段"><a href="#卸载阶段" class="headerlink" title="卸载阶段"></a>卸载阶段</h2><p><code>componentWillUnmount</code>  组件卸载，执行清理工作（比如：清理定时器）</p><h2 id="todo案例优化"><a href="#todo案例优化" class="headerlink" title="todo案例优化"></a>todo案例优化</h2><p><strong>自动聚焦</strong></p><p>在之前写到 <code>todo</code> 案例中，所有的 <code>input</code> 都写在一个 <code>ul</code> 列表之中，而创建的 <code>Ref = React.createRef()</code> 加到 <code>input</code> 属性的时候，多个 <code>input</code> 使用的同一个 <code>Ref</code> 属性，所以在双击的时候触发的 <code>this.inputRef.current.focus()</code> 方法，只能在最后一个被覆盖加上了属性的 <code>input</code> 框才能正常使用  <code>this.inputRef.current</code> 的打印是最后一个被覆盖的</p><h2 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h2><p><code>setState()</code> 函数是异步更新的，多次调用修改同一数据会有覆盖效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">coun</span>+<span class="hljs-number">1</span><br>    &#125;)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">coun</span>+<span class="hljs-number">1</span><br>    &#125;)<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">money</span>:<span class="hljs-number">2000</span><br>    &#125;) <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">coun</span>+<span class="hljs-number">1</span><br>    &#125;)<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">coun</span>+<span class="hljs-number">2</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>此处的数据更新调用相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>  <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">coun</span>+<span class="hljs-number">2</span>,<br>  <span class="hljs-attr">money</span>:<span class="hljs-number">2000</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>需要解决这种覆盖问题，多次调用 <code>setState()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">state</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">count</span>:state.<span class="hljs-property">count</span>+<span class="hljs-number">1</span><br>    &#125;<br>&#125;)<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">state</span>)=&gt;</span>(&#123;<span class="hljs-attr">count</span>:state.<span class="hljs-property">count</span>+<span class="hljs-number">1</span>&#125;)<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">state</span>)=&gt;</span>(&#123;<span class="hljs-attr">count</span>:state.<span class="hljs-property">count</span>+<span class="hljs-number">1</span>&#125;)              <br></code></pre></td></tr></table></figure><h2 id="组件更新机制"><a href="#组件更新机制" class="headerlink" title="组件更新机制"></a>组件更新机制</h2><p><code>setState()</code> 的两个作用：1. 修改 <code>state</code> 2.更新 UI</p><p>过程：父组件重新渲染时，也会重新渲染子组件，但是只会更新子组件树 </p><h3 id="一些性能优化"><a href="#一些性能优化" class="headerlink" title="一些性能优化"></a>一些性能优化</h3><p><strong>1.减轻 state</strong></p><ul><li>减轻 <code>state</code> ：只存储跟组件渲染相关的数据</li><li>注意：不用做渲染的数据不要放在 <code>state</code> 中，比如定时器</li><li>对于需要在多个方法中用到的数据，应该直接放在 <code>this</code> 中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">timerId</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;,<span class="hljs-number">1000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.shouldComponentUpdate</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params">nextProps</span>)&#123;<br>    <span class="hljs-comment">//nextProps 下一个要渲染组件的参数</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">money</span> === nextProps.<span class="hljs-property">money</span>)&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-comment">//如果不需要改动就不更新</span><br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <span class="hljs-comment">//如果有发送改变就更新</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个不常用的 钩子函数 ， 在复杂的数据类型中可能不适用</p><p>第二个参数 <code>nextState</code> 和下一个要渲染的 <code>state</code> 做对比</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params">nextProps,nextState</span>)&#123;<br>    <span class="hljs-comment">//nextProps 下一个要渲染组件的参数</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">current</span> === nextState.<span class="hljs-property">current</span>)&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-comment">//如果不需要改动就不更新</span><br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <span class="hljs-comment">//如果有发送改变就更新</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="纯组件"><a href="#纯组件" class="headerlink" title="纯组件"></a>纯组件</h2><p><code>React.PureComponent</code>   </p><p>其功能与 <code>ReactComponent</code> 相似，别去在于 <code>PureComponent</code> 内部自动实现了 <code>shouldComponentUpdate</code> 钩子函数，不需要手动去实现</p><p><strong>原理：</strong> 纯组件内部通过分别对比前后两次 <code>props</code> 和 <code>state</code> 的值，来绝对是否重新渲染组件</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05-React的组件通信</title>
    <link href="/React/05.%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <url>/React/05.%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><p><strong>组件</strong> 是独立且封闭的单元，默认清空下，只能使用组件自己的数据。在组件化过程中，我将一个完整的功能拆分成多个组件，以更好的完整整个应用的功能。而在这个过程中，多个组件之间不可避免的要共享某些数据。为了实现这些功能，就需要打破组件的独立封闭性，让其与外界沟通。这个过程就是 <strong>组件通信</strong></p><p><strong><code>props</code></strong></p><ul><li>组件时封闭的，要接收外不数据应该通过 <code>props</code> 实现</li><li><code>props</code> 的作用：接收传递给组件的数据</li><li>传递数据：给组件标签添加属性</li><li>接收数据：函数组件通过参数 <code>props</code> 接收数据，类组件通过 <code>this.props</code> 接收数据</li></ul><h2 id="子父组件通信"><a href="#子父组件通信" class="headerlink" title="子父组件通信"></a>子父组件通信</h2><p><strong>函数组件之间的通信</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> <span class="hljs-attr">car</span>=<span class="hljs-string">&quot;ddd&quot;</span> <span class="hljs-attr">money</span>=<span class="hljs-string">&#123;100&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Demo</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span> <span class="hljs-attr">car</span>=<span class="hljs-string">&quot;ddd&quot;</span> <span class="hljs-attr">money</span>=<span class="hljs-string">&#123;100&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Hello</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子组件 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params">props</span>)&#123;<br>    <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Demo组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;props.car&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;props.money&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类组件的通信</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">const</span> &#123;car,money&#125;  = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>        <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;props.car&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;props.money&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="props的特征"><a href="#props的特征" class="headerlink" title="props的特征"></a>props的特征</h3><ul><li><p>可以给组件传递任意类型的数据</p></li><li><p><code>props</code> 是只读的，不允许修改 <code>props</code> 的数据，单向数据流</p></li><li><p>注意：在类组件中使用的时候，需要把 <code>porps</code> 传递给 <code>super()</code> ，否则构造函数无法获取到 <code>props</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">super</span>(props)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><ol><li>父组件提供要传递的 <code>state</code> 数据</li><li>给子组件标签添加属性，值为 <code>state</code> 中的数据</li><li>子组件中通过  <code>props</code> 接收父组件中传递的数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Child</span> wife=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">wife</span>&#125;&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">&#123;wife&#125;</span>)&#123;<br>    <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;wife&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><ol><li>父组件提供一个回调函数 （用于接收数据）</li><li>将该函数作为属性的值，传递给子组件</li><li>子组件通过 <code>props</code> 调用回调函数</li><li>将子组件的数据作为参数传递给回调函数</li></ol><p><strong>父组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Child</span> wife=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">wife</span>&#125; changeName=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">changeName</span>&#125;&gt;<br>changeName = <span class="hljs-function">(<span class="hljs-params">name</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">sonWife</span>:name<span class="hljs-comment">//接收传递回的参数</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>子组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.wife&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &lt;/<span class="hljs-attr">div</span>&gt;</span></span><br><span class="language-xml">&#125;</span><br><span class="language-xml">handleChange = (e)=&gt;&#123;</span><br><span class="language-xml">    this.setState(&#123;</span><br><span class="language-xml">        wife:e.target.value</span><br><span class="language-xml">    &#125;)</span><br><span class="language-xml">    this.props.changeName(e.target.value)</span><br><span class="language-xml">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>09-React的路由</title>
    <link href="/React/09.%E8%B7%AF%E7%94%B1/"/>
    <url>/React/09.%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h2 id="单页面应用程序"><a href="#单页面应用程序" class="headerlink" title="单页面应用程序"></a>单页面应用程序</h2><ul><li><strong>SPA</strong> 单页面应用程序，整个应用钟只有一个页面</li><li><strong>MPA</strong>  多页面应用程序，整个应用中有很多页面</li></ul><p>优势</p><ol><li>加快页面响应速度，降低了对服务器的压力</li><li>更好的用户体验，运行更加流畅</li></ol><p>缺点</p><ul><li>不利于 <code>SEO</code> 搜索引擎优化</li></ul><h2 id="React路由"><a href="#React路由" class="headerlink" title="React路由"></a>React路由</h2><p>为了有效的使用单个页面来管理原来多页面功能，前端路由应运而生</p><p>前端路由是一套映射关系：锚点值和组件的映射</p><h2 id="路由的简单自我实现"><a href="#路由的简单自我实现" class="headerlink" title="路由的简单自我实现"></a>路由的简单自我实现</h2><p>当锚点值发送改变时，会触发一个 <code>hashchange</code> 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;hashchange&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">currentHash</span>:<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>对 <code>state</code> 存储的 <code>currentHash</code> 值进行判断做出对应的组件显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;currentHash === <span class="hljs-string">&#x27;/home&#x27;</span>&amp;&amp;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">home</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">home</span>&gt;</span></span>&#125;<br>&#123;currentHash === <span class="hljs-string">&#x27;/my&#x27;</span>&amp;&amp;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">my</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my</span>&gt;</span></span>&#125;<br>&#123;currentHash === <span class="hljs-string">&#x27;/f&#x27;</span>&amp;&amp;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">f</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">f</span>&gt;</span></span>&#125;<br></code></pre></td></tr></table></figure><h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React-Router"></a>React-Router</h2><p>下载对应的包模块 </p><p><code>npm install react-router-dom</code>  下载 web 开发的路由包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">HashRouter</span>,<span class="hljs-title class_">Link</span>,<span class="hljs-title class_">Route</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">return</span> (<br>&lt;HashRouter&gt;<br>    &lt;Link to=&quot;/home&quot;&gt;首页&lt;/Link&gt;<br>        &lt;Link to=&quot;/my&quot;&gt;我的&lt;/Link&gt;<br>        &lt;Link to=&quot;/friend&quot;&gt;朋友&lt;/Link&gt;<br>    &lt;Route path = &quot;/home&quot; component=&#123;Home&#125;&gt;&lt;Route&gt;<br>    &lt;Route path = &quot;/my&quot; component=&#123;My&#125;&gt;&lt;Route&gt;<br>        &lt;Route path = &quot;/friend&quot; component=&#123;Friend&#125;&gt;&lt;Route&gt;<br>    &lt;/HashRouter&gt;<br>)<br></code></pre></td></tr></table></figure><ul><li><code>Link</code>  路由导航链接</li><li><code>Route</code>  路由指定规则</li><li><code>HashRouter</code>   路由入口</li></ul><p><code>router</code> 包还提供了一个 <code>BrowserRouter</code> 替代 <code>HashRouter</code> 不会显示锚</p><h2 id="路由的执行过程"><a href="#路由的执行过程" class="headerlink" title="路由的执行过程"></a>路由的执行过程</h2><ol><li>点击 <code>Link</code> 组件，修改了浏览器地址的 <code>url</code></li><li><code>React</code> 路由监听到地址栏 <code>url</code> 的变化 <code>hashChange popState</code> </li><li><code>React</code> 路由内部遍历所有 <code>React</code> 组件，使用路由规则 <code>path</code> 与 <code>pathname</code> 进行匹配</li><li>当路由规则能够匹配地址栏中的 <code>pathname</code>  时，就展示该 <code>Router</code> 组件的内容</li></ol><h2 id="NavLink"><a href="#NavLink" class="headerlink" title="NavLink"></a>NavLink</h2><p><code>Link</code> 组件最终会渲染为 a 标签，用于指定路由导航</p><ul><li>to 属性</li><li>无法展示高亮</li></ul><p><code>NavLink</code> 组件，一个更特殊的 <code>Link</code> 组件，可以用于指定当前导航的高亮</p><ul><li>to 属性</li><li><code>activeClass</code>  用于指定高亮的类名，默认的类名为 <code>active</code></li><li><code>exact</code>   精准匹配，表示必须精准匹配类名才生效（根节点）</li></ul><h2 id="Switch与404"><a href="#Switch与404" class="headerlink" title="Switch与404"></a>Switch与404</h2><p>这是 <code>react-router-dom</code> 提供的一个组件</p><p>在 <code>Switch</code> 组件中，不管有多少个路由规则，只会渲染匹配到的第一个路由规则</p><p>因此，通过 <code>Switch</code> 组件非常容易的实现 404 错误页面的显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Switch</span>&gt;<br>&lt;Route path = &quot;/home&quot; component=&#123;Home&#125;&gt;&lt;Route&gt;<br>   &lt;Route path = &quot;/my&quot; component=&#123;My&#125;&gt;&lt;Route&gt;<br>    &lt;Route path = &quot;/friend&quot; component=&#123;Friend&#125;&gt;&lt;Route&gt;<br>    &lt;Route component=&#123;NoMatch&#125;&gt;&lt;Route&gt;<br>&lt;/Switch&gt;<br></code></pre></td></tr></table></figure><h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><p>路由的嵌套和一级路由的使用类似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Route</span> path = <span class="hljs-string">&quot;/my/list&quot;</span> component=&#123;<span class="hljs-title class_">List</span>&#125;&gt;&lt;<span class="hljs-title class_">Route</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>需要注意的是</strong></p><ul><li>路由的嵌套不需要导入 <code>HashRouter</code> ，已经有路由入口了</li><li>路由的嵌套需要加上父级路由的地址，才能匹配到子路由</li></ul><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p><code>Redirect</code>  由路由提供的重定向组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Redirect</span> exact <span class="hljs-keyword">from</span>=<span class="hljs-string">&quot;/&quot;</span> to=<span class="hljs-string">&quot;/home&quot;</span>&gt;&lt;/<span class="hljs-title class_">Redirect</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>在使用 <code>Router</code> 路由规则的使用，会给加载的组件传递三个参数</p><ul><li><code>history</code> 是 <code>React</code> 路由提供的，用于获取浏览器历史记录的相关信息</li><li><code>push(path)</code> : 跳转到某个页面，参数 <code>path</code> 表示要跳转的路径</li><li><code>go(n)</code> : 前进或后退到某个页面，参数 <code>n</code> 表示前进或后退的页面数量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">handleClick= <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;./home&#x27;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="动态路由参数"><a href="#动态路由参数" class="headerlink" title="动态路由参数"></a>动态路由参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Router</span> path=<span class="hljs-string">&quot;/detail/:id&quot;</span> component=&#123;<span class="hljs-title class_">Detail</span>&#125;&gt; &lt;/<span class="hljs-title class_">Router</span>&gt;<br></code></pre></td></tr></table></figure><p><code>const &#123;match&#125;=this.props</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;&#123;match.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>可以获取到动态路由的参数</p><h2 id="实现路由守卫"><a href="#实现路由守卫" class="headerlink" title="实现路由守卫"></a>实现路由守卫</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Route</span> path = <span class="hljs-string">&#x27;/login&#x27;</span> render = &#123;<span class="hljs-function">(<span class="hljs-params">props</span>)=&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span> &#123;<span class="hljs-attr">...props</span>&#125;/&gt;</span></span>&gt;&lt;/<span class="hljs-title class_">Route</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="AuthRoute封装"><a href="#AuthRoute封装" class="headerlink" title="AuthRoute封装"></a>AuthRoute封装</h2><p>基本结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthRoute</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">component</span>:<span class="hljs-title class_">Component</span>,...rest&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> &#123;<span class="hljs-attr">...rest</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">   <span class="hljs-attr">render</span> = <span class="hljs-string">&#123;(props)</span>=&gt;</span>&#123;</span><br><span class="language-xml">         if(hasToken())&#123;</span><br><span class="language-xml">            return <span class="hljs-tag">&lt;<span class="hljs-name">Component</span> &#123;<span class="hljs-attr">...props</span>&#125;/&gt;</span></span><br><span class="language-xml">         &#125;else&#123;</span><br><span class="language-xml">           return <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/login&#x27;</span>/&gt;</span></span><br><span class="language-xml">         &#125;</span><br><span class="language-xml">       &#125;&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10-极客PC项目</title>
    <link href="/React/10.%E6%9E%81%E5%AE%A2PC%E9%A1%B9%E7%9B%AE/"/>
    <url>/React/10.%E6%9E%81%E5%AE%A2PC%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="极客园后台"><a href="#极客园后台" class="headerlink" title="极客园后台"></a>极客园后台</h2><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li><p>初始化项目结构 - src</p></li><li><p>配置路由规则 - router （login、home）</p></li><li><p>配置好 <code>antd</code> 的组件使用</p></li><li><p>登录页面结构初始化 - css 和 antd 的基本使用</p></li><li><p>配置项目的绝对路径使用 和 了解 scss 的基本使用</p></li><li><p>登入页面的样式编写 - 使用 Antd 组件</p></li><li><p>配置表单的校验规则 - 手机号、验证码、是否勾选等</p></li><li><p>校验规则的学习 - 自定义校验规则  promise</p></li><li><p>封装 axios ，完成基本的登入功能</p></li><li><p>优化 antd 的登入提示，和 loading 加载效果</p></li><li><p>解决在 react 中  css 的样式重名问题 - 了解 css-modules 的基本使用</p></li><li><p>css-modules 对 iconfont 类的全局样式的修改</p></li><li><p>配合 scss 使用 ， 解决 css-modules 使用的弊端</p></li><li><p>首页布局 基本样式的编写  - Layout</p></li><li><p>页面布局 - 头部样式的编写</p></li><li><p>页面布局 - 侧边栏 页面的编写</p></li><li><p>处理首页布局的整体样式</p></li><li><p>配置 嵌套路由  - 对 token 进行基本的封装</p></li><li><p>退出功能基本功能实现 -  路由守卫对退出逻辑的完善</p></li></ul><h2 id="样式冲突"><a href="#样式冲突" class="headerlink" title="样式冲突"></a>样式冲突</h2><p>组件样式覆盖问题</p><ul><li>在组件中添加样式，其它组件的样式也跟着发生了改变，组件之间的样式是互相影响的</li><li>原因：在配置路由时，所有的组件都被导入到了项目中，那么组件的样式也就被导入到了项目中。如果组件之间样式名称相同，那么一个组件中的样式就会在另一个组件中也生效，从而造成组件之间样式互相覆盖的问题</li></ul><p><strong>解决方案</strong></p><ul><li>手动处理，起不同的类名</li><li><code>CSS IN JS</code> 以 <code>js</code> 的方式来处理 <code>css</code></li></ul><p>常用的 <code>css in js</code> 包有 <code>CSS Modules</code> </p><h2 id="css-module基本使用"><a href="#css-module基本使用" class="headerlink" title="css module基本使用"></a>css module基本使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> style <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./idnex.module.css&#x27;</span><br><br>&lt;div className = &#123;style.<span class="hljs-property">test</span>&#125;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>类名使用驼峰命名，如果不使用需要使用 <code>styles[&#39;tab-bar&#39;]</code></li><li>如果时全局类名，应该使用 <code>:gloabl(.icon-map)</code> ，不会修改全局类名</li></ul><p><strong>配合 less 等使用</strong></p><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> style <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./idnex.module.css&#x27;</span><br><br>&lt;div className = &#123;style.<span class="hljs-property">test</span>&#125;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><code>index.module.less</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-property">home</span>&#123;<br>    <span class="hljs-attr">width</span>:<span class="hljs-number">100</span>%;<br>    <span class="hljs-attr">height</span>:<span class="hljs-number">100</span>%;<br>    <span class="hljs-comment">//...</span><br>    :<span class="hljs-variable language_">global</span>&#123;<br>        .<span class="hljs-property">home</span>-container&#123;<br>            <span class="hljs-comment">//...</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AuthRuter"><a href="#AuthRuter" class="headerlink" title="AuthRuter"></a>AuthRuter</h2><h3 id="回传页面"><a href="#回传页面" class="headerlink" title="回传页面"></a>回传页面</h3><p><strong>重定向传入数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> </span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">pathname:</span>&#x27;/<span class="hljs-attr">login</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">search:</span>&#x27;?<span class="hljs-attr">from</span>=<span class="hljs-string">/home</span>&#x27;,//<span class="hljs-attr">search同样也能获取到</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">state:</span>&#123;<span class="hljs-attr">from:props.location.pathname</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">&#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">)</span></span><br></code></pre></td></tr></table></figure><p><strong>登入页</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123;state&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">location</span><br><span class="hljs-keyword">if</span>(state)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(state.<span class="hljs-property">from</span>) <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/home&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>登入接口编写、渲染用户基本信息</p></li><li><p>token 过期逻辑处理在拦截器中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createBroserHistory&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;history&#x27;</span><br><span class="hljs-keyword">const</span> history = <span class="hljs-title function_">createBrowserHistory</span>()<br>exoport <span class="hljs-keyword">default</span> history<br></code></pre></td></tr></table></figure><p><code>App.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Router</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> history <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;utils/history&#x27;</span><br>&lt;<span class="hljs-title class_">Router</span> history = &#123;history&#125;&gt;&lt;/<span class="hljs-title class_">Router</span>&gt;<br></code></pre></td></tr></table></figure><p><code>request.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> history <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;utils/history&#x27;</span><br>history.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>处理侧边栏高亮逻辑</p></li><li><p>数据概览图片加入</p></li><li><p>内容管理 - 面包屑 </p></li><li><p>内容管理 - 表单布局渲染</p></li><li><p>列表表单 - 样式编写、封装接口获取渲染文章列表</p></li></ul><h2 id="内容管理"><a href="#内容管理" class="headerlink" title="内容管理"></a>内容管理</h2><h3 id="分页处理"><a href="#分页处理" class="headerlink" title="分页处理"></a>分页处理</h3><ul><li>1、2</li><li>pagination</li></ul><h3 id="筛选功能"><a href="#筛选功能" class="headerlink" title="筛选功能"></a>筛选功能</h3><ul><li>3、4</li><li>注意 bug ，逻辑</li><li><code>delete</code></li></ul><h3 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h3><ul><li>5</li><li><code>API</code></li></ul><h2 id="发布内容"><a href="#发布内容" class="headerlink" title="发布内容"></a>发布内容</h2><h3 id="拦截器处理网络超时显示"><a href="#拦截器处理网络超时显示" class="headerlink" title="拦截器处理网络超时显示"></a>拦截器处理网络超时显示</h3><ul><li>6</li><li><code>拦截器</code></li></ul><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ul><li>7、8、9、10、11、12、13、14</li><li>表单结构 </li><li>校验</li><li>封装一些组件</li><li>富文本编辑器</li><li>封面上传 </li><li>数量逻辑控制 </li><li>预览</li><li>图片校验 <code>upload_isignore</code></li></ul><h3 id="发送文章"><a href="#发送文章" class="headerlink" title="发送文章"></a>发送文章</h3><ul><li>添加草稿  - 18</li><li><code>this.formRef.current.validateFields()</code></li></ul><h2 id="修改文章"><a href="#修改文章" class="headerlink" title="修改文章"></a>修改文章</h2><h3 id="路由设置获取文章id"><a href="#路由设置获取文章id" class="headerlink" title="路由设置获取文章id"></a>路由设置获取文章id</h3><h3 id="显示文章详情"><a href="#显示文章详情" class="headerlink" title="显示文章详情"></a>显示文章详情</h3><h3 id="修复路由bug"><a href="#修复路由bug" class="headerlink" title="修复路由bug"></a>修复路由bug</h3><ul><li>05  </li><li><code>key</code></li></ul><h2 id="处理侧边栏高亮问题"><a href="#处理侧边栏高亮问题" class="headerlink" title="处理侧边栏高亮问题"></a>处理侧边栏高亮问题</h2><blockquote><p>面包屑路由跳转不会重新创建组件</p></blockquote><p><code>componentDidUpdate()</code> </p><p>有个死循环的逻辑</p><ul><li>发布修改文章的高亮问题</li></ul><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Suspense</span> fallbacl=&#123;<br>  (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>loading<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br>&#125;&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br> &lt;/<span class="hljs-title class_">Suspense</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13-hooks更多用法</title>
    <link href="/React/13.hooks%E6%9B%B4%E5%A4%9A%E7%94%A8%E6%B3%95/"/>
    <url>/React/13.hooks%E6%9B%B4%E5%A4%9A%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Hooks-更多用法"><a href="#Hooks-更多用法" class="headerlink" title="Hooks 更多用法"></a>Hooks 更多用法</h2><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef ()"></a>useRef ()</h2><p>使用场景：在 <code>React</code> 中进行 DOM 操作时，用来获取 DOM</p><p>作用：返回一个带有 <code>current</code> 属性的可变对象，通过该对象进行 DOM  操作了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inputRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todoapp&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span>&#123;&#x27; &#x27;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;add&#125;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：<code>useRef</code> 不仅仅可以用于操作 DOM ， 还可以操作组件</p><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext ()"></a>useContext ()</h2><p>使用场景：跨组件共享通信</p><p><code>Context</code> 作用：实现跨组件传递数据，而不必在每个级别手动传递 <code>props</code>，简化组件之间的数据传递过程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Context</span> = <span class="hljs-title function_">createContext</span>(defaultValue)<br><span class="hljs-keyword">const</span> value = <span class="hljs-title function_">useContext</span>(conText)<br></code></pre></td></tr></table></figure><p><code>Context</code> 对象包含了两个组件</p><ul><li><code>&lt;Context.Provider value&gt;</code>  通过 <code>value</code> 属性提供数据</li><li><code>&lt;Context.Consumer&gt;</code>  通过 <code>render-props</code> 模式，在 <code>JSX</code> 中获取<code>Context</code> 提供的数据</li></ul><p>在函数组件中，获取 <code>Context</code> 中的值，需需要配合 <code>Context</code> 一起使用而 <code>useContext</code> 和 <code>Context.Consumer</code> 的区别在于：获取数据的位置不同</p><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Context</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [color, setColor] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;red&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;color&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是根组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>颜色：&#123;color&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setColor(&#x27;yellow&#x27;)&#125;&gt;修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Father</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Father</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Context.Provider</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Father</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> color = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">Context</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>我是子组件--&#123;color&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="React-memo"><a href="#React-memo" class="headerlink" title="React-memo ()"></a>React-memo ()</h2><p>使用场景：在父组件的状态更新的时候，子组件就会无条件的一起更新</p><p>渲染过程</p><ul><li>子组件 <code>props</code> 变化时更新过程：组件代码执行 -&gt; JSX Diff(配合虚拟 DOM) -&gt; 渲染(变化后的内容) </li><li>子组件无变化更新过程：代码组件执行 -&gt; JSX Diff (配合虚拟DOM)</li></ul><p>为了提升性能，优化不必要的无变化子组件更新，这种情况就可以使用 <code>React.memo</code> 高阶组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child2</span> = (<span class="hljs-params">&#123; count &#125;</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Child2 子组件代码执行了&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &#x27;#<span class="hljs-attr">abc</span>&#x27; &#125;&#125;&gt;</span>子组件2：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Child1 子组件代码执行了&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &#x27;#<span class="hljs-attr">def</span>&#x27; &#125;&#125;&gt;</span>子组件1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &#x27;<span class="hljs-attr">pink</span>&#x27;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>计数器：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      &#123;/* 子组件 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><p>此示例，在子组件2更新时， 子组件1也会执行更新</p><p><code>memo</code> 作用：记忆上一次的更新渲染结果，在 <code>props</code> 没有变化时复用该结果，避免函数不必要的更新</p><p><strong>使用示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useState, memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span> <span class="hljs-comment">//导入</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child2</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">&#123; count &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Child2 子组件代码执行了&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &#x27;#<span class="hljs-attr">abc</span>&#x27; &#125;&#125;&gt;</span>子组件2：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child1</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Child1 子组件代码执行了&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &#x27;#<span class="hljs-attr">def</span>&#x27; &#125;&#125;&gt;</span>子组件1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>参数：需要被记忆的组件，不必要更新的组件</li><li>返回值： <code>React</code> 记住的 <code>Child</code> 组件</li></ul><p>原理：通过检查对比更新前后 <code>props</code> 是否相同，来决定是否复用上一次的渲染结果</p><p><strong>注意</strong>： 不是所有的组件都适用 <code>memo</code>，需要经常更新渲染的组件使用 <code>memo</code> 性能反而会降低</p><h3 id="浅层对比"><a href="#浅层对比" class="headerlink" title="浅层对比"></a>浅层对比</h3><p>默认情况下，<code>React.memo</code> 只会对更新前后的 <code>props</code> 进行浅对比</p><p>也就是说，对于对象类型的 <code>prop</code> 来说，只会比较引用(地址)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useState, memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child2</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">&#123; count &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Child2 子组件代码执行了&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &#x27;#<span class="hljs-attr">abc</span>&#x27; &#125;&#125;&gt;</span>子组件2：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child1</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">&#123; obj &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Child1 子组件代码执行了&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &#x27;#<span class="hljs-attr">def</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="language-xml">      子组件1 id:&#123;obj.id&#125; name:&#123;obj.name&#125; age:&#123;obj.age&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;yd&#x27;</span>,<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">11</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> &#x27;<span class="hljs-attr">pink</span>&#x27;, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>计数器：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      &#123;/* 子组件 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> <span class="hljs-attr">obj</span>=<span class="hljs-string">&#123;obj&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>此处传入的参数为 <code>引用数据类型</code>  ，所以在会浅层的对比地址是否发生变化所以在每次更新组件时，创建的 obj 的地址是不同的所以在更新 DOM 也会更新此组件 </p><p>可以使用 <code>React.memo</code> 的第二个参数手动控制比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">React</span>.<span class="hljs-title function_">memo</span>(<span class="hljs-title class_">Child</span>,<span class="hljs-keyword">function</span> <span class="hljs-title function_">areEqual</span>(<span class="hljs-params">prevProps,nextProps</span>)&#123;<br>  <span class="hljs-keyword">return</span> preProps === nextProps<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果返回为 <code>true</code> 表示记住不渲染组件，如果返回 <code>false</code> 表示渲染该组件</p><p>更好的解决方法</p><ul><li><code>useCallback</code> Hook：记住函数的引用，在组件每次更新时返回相同引用的函数。</li><li><code>useMemo</code> Hook：记住任意数据（数值、对象、函数等），在组件每次更新时返回相同引用的数据【功能之一】</li></ul><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback ()"></a>useCallback ()</h2><p>使用场景：在使用 <code>React.memo</code> 时，为了组件每次更新时都能获取到相同引用的函数，就要使用到 </p><p>作用：记忆传入的回调函数，这个被记住的回调函数会一直生效，知道依赖项发生改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> memorizedCallback = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-title function_">doSomething</span>(a,b)<br>&#125;,[a,b])<br></code></pre></td></tr></table></figure><ul><li>第一个参数：需要记忆的回调函数</li><li>第二个参数：依赖项数组，用于指定回调函数中依赖到的数据，即使没有依赖项也得传入空数组此时的回调函数会一直生效</li><li>返回值：<code>useCallback</code> 记住的回调函数</li></ul><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useState, memo, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> [money, setMoney] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1000</span>)<br><br>  <span class="hljs-keyword">const</span> help = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setCount</span>(count - <span class="hljs-number">1</span>)<br>  &#125;, [count])<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>计数器<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>豆豆被打了&#123;count&#125;次<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>金钱：&#123;money&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;打豆豆<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setMoney(money + 100)&#125;&gt;加钱<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      &#123;count &lt; 5 ? <span class="hljs-tag">&lt;<span class="hljs-name">DouDou</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> <span class="hljs-attr">help</span>=<span class="hljs-string">&#123;help&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">DouDou</span>&gt;</span> : &#x27;豆豆被打死了&#x27;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DouDou</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">&#123; count, help &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;豆豆组件渲染&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是豆豆组件&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;help&#125;</span>&gt;</span>续命<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;)<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo ()"></a>useMemo ()</h2><p>使用场景：类似于 <code>useCallback</code> ，可以在组件更新期间保持任意数据引用相等，一般用来处理对象类型的数据</p><p>作用：记忆任意数据，这个被记住的数据会一直生效，知道依赖项发生改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> memorizedValue = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">()=&gt;</span><span class="hljs-title class_">Valus</span>,deps)<br></code></pre></td></tr></table></figure><ul><li>第一个参数：回调函数，注意该函数会被调用，并通过返回值指定需要被记住的数据</li><li>第二个参数：依赖项数组，用于指定回调函数中依赖到的数据</li><li>返回值：<code>useMemo</code> 记住的数据</li></ul><p>如何选择使用哪一个？</p><ul><li>如果处理的是函数，推荐使用 useCallback Hook。</li><li>如果处理的是其他数据（比如，对象），推荐使用 useMemo Hook。</li></ul><p><strong>模拟useCallback</strong></p><blockquote><p><code>useCallback(fn, deps)</code> 相当于 <code>useMemo(() =&gt; fn, deps)</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> help = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setCount</span>(count - <span class="hljs-number">1</span>)<br>&#125;, [count])<br><br><br><br><span class="hljs-keyword">const</span> help = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">setCount</span>(count - <span class="hljs-number">1</span>)<br>    &#125;<br>&#125;, [count])<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, memo, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">5</span>)<br>  <span class="hljs-keyword">const</span> [money, setMoney] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1000</span>)<br><br>  <span class="hljs-comment">// 记忆的函数=useCallback(函数, [依赖])</span><br>  <span class="hljs-comment">// 只要依赖项不变，这个函数就不会变化，如果依赖项变了，这个函数就会变化</span><br>  <span class="hljs-keyword">const</span> help = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>)<br>    &#125;<br>  &#125;, [count])<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>根组件--&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>金钱：&#123;money&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count - 1)&#125;&gt;打豆豆<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setMoney(money + 100)&#125;&gt;挣钱<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      &#123;count &gt; 0 ? <span class="hljs-tag">&lt;<span class="hljs-name">DouDou</span> <span class="hljs-attr">help</span>=<span class="hljs-string">&#123;help&#125;</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">DouDou</span>&gt;</span> : &#x27;豆豆被打死了&#x27;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DouDou</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">&#123; count, help &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;豆豆更新了&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>豆豆组件被打了&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;help&#125;</span>&gt;</span>续命<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br><br></code></pre></td></tr></table></figure><h3 id="避免昂贵的计算（计算属性）"><a href="#避免昂贵的计算（计算属性）" class="headerlink" title="避免昂贵的计算（计算属性）"></a>避免昂贵的计算（计算属性）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> memoizedValue = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">computeExpensiveValue</span>(a, b), [a, b]);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11-React的组件复用</title>
    <link href="/React/11.%E7%BB%84%E4%BB%B6%E5%A4%8D%E7%94%A8/"/>
    <url>/React/11.%E7%BB%84%E4%BB%B6%E5%A4%8D%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h2><p>组件复用</p><h2 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h2><p>已经废弃了的组件复用</p><ul><li>mixins 引入了隐式依赖关系</li><li>mixins 会导致名称冲突</li><li>mixins 导致会复杂臃肿</li></ul><p>复用组件的状态和组建的逻辑，组件的 UI 不一样</p><h2 id="render-props"><a href="#render-props" class="headerlink" title="render-props"></a>render-props</h2><ul><li>思路：将要复用的 <code>state</code> 和操作 <code>state</code> 方法封装到一个组件中</li><li>在使用组件时，添加一个值为函数的 <code>prop</code> ，通常把这个<code>prop</code> 命名为 <code>render</code> ，在组件内部调用这个函数，传进来的函数会负责 UI 的渲染</li><li>在组件内部调用方法的时候，把状态当成参数进行传递</li></ul><p><strong>封装的组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">state=&#123;<br>    <span class="hljs-attr">x</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">y</span>:<span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br><span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">move</span>)<br>&#125;<br><span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">move</span>)<br>&#125;<br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>)<span class="hljs-comment">//用参数调用了函数，渲染了UI</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>调用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">MOuse</span> <br>render = &#123;<span class="hljs-function">(<span class="hljs-params">&#123;x,y&#125;</span>)=&gt;</span>(<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>当前鼠标的位置<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;x&#125;,&#123;y&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)&#125;&gt;<br>&lt;/<span class="hljs-title class_">Mouse</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>使用</strong></p><p>使用相同的逻辑代码去渲染不同的 UI ，只需要提供相应的结构就行</p><p>组件提供相应的结构</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">-<span class="hljs-title class_">Mouse</span><br>--<span class="hljs-title class_">Position</span><br>--<span class="hljs-title class_">Cat</span><br></code></pre></td></tr></table></figure><h2 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h2><ul><li>目的：实现状态逻辑复用，增强一个组件的能力</li><li>采用 包装(装饰) 模式</li><li>高阶组件就相当于手机壳，通过包装组件，增强组件功能</li></ul><p><strong>思路</strong></p><ul><li>高阶组件（HOC , Higher-Order Component）是一个函数，接收要包装的组件，返回增强后的组件</li><li>高阶组件的命名：<code>withXxx</code></li><li>高阶组件内部创建一个类组件，在这个类组件中提供复用的状态逻辑代码，通过prop 将复用的数据传递给被包装的组件</li></ul><p><strong>高阶组件的封装</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">withMouse</span>(<span class="hljs-params">Base</span>)&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>        state=&#123;<br>            <span class="hljs-attr">x</span>:<span class="hljs-number">0</span>,<br>            <span class="hljs-attr">y</span>:<span class="hljs-number">0</span><br>        &#125;<br>    move = <span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">pageX</span>,e.<span class="hljs-property">pageY</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>                <span class="hljs-attr">x</span>:e.<span class="hljs-property">pageX</span>,<br>                <span class="hljs-attr">y</span>:e.<span class="hljs-property">pageY</span><br>            &#125;)<br>        &#125;<br>        <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">move</span>)<br>        &#125;<br><br>        <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">move</span>)<br>        &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Base</span> &#123;<span class="hljs-attr">...this.state</span>&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Base</span>&gt;</span></span><br>        &#125;<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Mouse</span><br>&#125;<br><br><br><br><br></code></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDom</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Cat&quot;</span><br><span class="hljs-keyword">import</span> position <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Position&quot;</span><br><span class="hljs-keyword">import</span> withMouse <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./withMouse&quot;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CatWithMouse</span> = <span class="hljs-title function_">withMouse</span>(<span class="hljs-title class_">Cat</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Position</span> = <span class="hljs-title function_">withMouse</span>(<span class="hljs-title class_">Positon</span>)<br><span class="hljs-keyword">const</span> element = (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>高阶组件的使用<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">CatWithMouse</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">CatWithMouse</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Position</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Position</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br><span class="hljs-title class_">React</span>.<span class="hljs-title function_">render</span>(element,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getEelementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="多高阶组件props丢失问题"><a href="#多高阶组件props丢失问题" class="headerlink" title="多高阶组件props丢失问题"></a>多高阶组件props丢失问题</h2><p><code>const p = withScroll(withMouse(Postion))</code></p><p><img src="/.%5C%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85%E4%BC%A0%E5%80%BC.png"></p><p>解决：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Base</span> &#123;<span class="hljs-attr">...this.state</span>&#125; &#123;<span class="hljs-attr">...this.props</span>&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Base</span>&gt;</span></span><br>        &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12-hooks</title>
    <link href="/React/12.hooks/"/>
    <url>/React/12.hooks/</url>
    
    <content type="html"><![CDATA[<h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><p>Hooks 是 <code>React v16.8</code> 新增功能</p><p>作用：为函数组件提供状态、生命周期等原本 <code>class</code> 组件中提供的 <code>React</code> 功能，  <code>Hooks</code> 为函数组件钩入 <code>class</code> 组件的特征</p><p><code>R16.8</code> 组件开发模式的对比</p><ul><li><p>之前： <code>class</code>组件（提供状态） + 函数组件（展示内容）</p></li><li><p>之后：</p><ul><li><code>class</code>组件（提供状态） + 函数组件（展示内容）</li><li><code>Hooks</code> （提供状态） + 函数组件（展示内容）</li></ul><p>混用了以上两种方式</p><p><strong>注意：</strong> 有了 <code>hooks</code> ，不能再把函数组件成为无状态组件，<code>hooks</code> 为函数提供了状态</p></li></ul><h2 id="hooks优势"><a href="#hooks优势" class="headerlink" title="hooks优势"></a>hooks优势</h2><ul><li><p>组件的逻辑逻辑复用，HOCs、render-props重构组件结构，导致组件形成了 JSX 嵌套地狱的问题</p></li><li><p>class 组件自身的问题</p><ul><li>class中的this指向问题</li><li>相互关联且需要对照修改的代码被拆分到不同生命周期函数中</li><li>不利于代码压缩和优化，也不利于 TS 的类型推导</li></ul></li></ul><ol><li>Hooks 只能在函数组件中使用，避免了 class 组件的问题</li><li>复用组件状态逻辑，而无需更改组件层次结构</li><li>根据功能而不是基于生命周期方法强制进行代码分割</li><li>抛开 <code>React</code> 赋予的概念来说，<code>Hooks</code> 就是一些普通的函数</li><li>具有更好的 TS 类型推导，tree-shaking 友好</li></ol><h2 id="hooks基本使用"><a href="#hooks基本使用" class="headerlink" title="hooks基本使用"></a>hooks基本使用</h2><h3 id="useState"><a href="#useState" class="headerlink" title="useState ()"></a>useState ()</h3><ul><li>使用场景：当你想要在函数组件中，使用组件状态时，就要使用 <code>useState</code>  Hooks</li><li>作用：为函数组件提供状态</li></ul><p>使用示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Count</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-keyword">const</span> stateArray = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">const</span> [state,setState] = stateArray[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> (<br>     <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        state</span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>setState(state+1)&#125;&gt;click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>   </span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>状态的读取和修改</strong></p><p><strong>读取状态</strong>：该方法提供的状态，是函数内部的局部变量，可以在函数内的任意位置使用</p><p><strong>修改状态</strong>： <code>setCount</code> 是一个函数，参数表示：新的状态值</p><p><strong>组件更新的过程</strong></p><p>函数组件使用 <code>useState</code> 后的执行过程，以及状态值的变化</p><p><strong>组件第一次渲染</strong></p><ol><li>从头开始是执行该组件的代码逻辑</li><li>调用 <code>useState(0)</code> 将传入的参数作为状态初始值</li><li>渲染组件时，此时，获取到的状态值为</li></ol><p><strong>选进第二次渲染</strong></p><ol><li>点击按钮，调用 <code>setCount(count+1)</code> 修改状态，因为状态发生改变，所以，该组件会重新渲染</li><li>组件重新渲染时，会再次执行该组件中的代码逻辑</li><li>再次调用 <code>useState(0)</code> , 此时 <code>React</code> 内部会拿到最新值而非初始值</li><li>再次渲染组件，此时获取到的组件的状态值为最新值</li></ol><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><p>注意：<code>React Hooks</code> 只能直接出现在 函数组件 中，不能嵌套在 <code>if/for</code> 其它 函数中</p><p><code>React Hooks</code> 必须每次组件渲染时，按照相同的顺序来调用所有的 <code>Hooks</code> </p><ul><li>为什么会有这样的规则？因为 <code>React</code> 是按照 <code>Hooks</code> 的调用顺序来识别每一个 <code>Hook</code> ，如果每次调用的顺序不一样，导致 <code>React</code> 无法知道哪一个是 <code>Hook</code></li></ul><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect ()"></a>useEffect ()</h3><p><strong>作用：处理函数组件中的副作用</strong></p><p>对 <code>React</code> 组件来说，著作用就是根据数据流渲染 UI ，除此之外的都是副作用 . 如：数据请求 、动手修改 DOM 、localSorage 操作等</p><p><strong>基本使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useEffect&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">litle</span> = <span class="hljs-string">`当前点击次数 <span class="hljs-subst">$&#123;count&#125;</span> 次`</span><br>&#125;, , )<br></code></pre></td></tr></table></figure><p>参数1：回调函数，就是在该函数中写会产生副作用的代码</p><p>执行实际：该 <code>effect</code> 会在组件渲染后以及组件更新后执行</p><p>相当于 ： <code>componentDidMount</code>  + <code>componentDidUpdate</code></p><p><strong>依赖项</strong></p><p>描述：如果组件中有另一个状态，另一个状态状态更新，函数中的回调函数也会执行</p><p>性能优化：跳过不必要的执行，只在 <code>count</code> 变化时，才执行相应的 <code>effect</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">litle</span> = <span class="hljs-string">`当前点击次数 <span class="hljs-subst">$&#123;count&#125;</span> 次`</span><br>&#125;,[count])<br></code></pre></td></tr></table></figure><p>参数2 ： 可选的，可以传入一个数组，数组中的元素为副作用函数的依赖性 . 表示只有在依赖性改变时，才会重新执行 <code>effect</code></p><p>空数组：该 <code>effect</code> 只会在组件第一次渲染后执行 ，相当于<code>componentDidMount</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 触发时机：1 第一次渲染会执行 2 每次组件重新渲染都会再次执行</span><br><span class="hljs-comment">// componentDidMount + ComponentDidUpdate</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;)<br><br><span class="hljs-comment">// componentDidMount</span><br><span class="hljs-comment">// 触发时机：只在组件第一次渲染时执行</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;, [])<br><br><span class="hljs-comment">// componentDidMount + componentDidUpdate(判断)</span><br><span class="hljs-comment">// 触发时机：1 第一次渲染会执行 2 当 count 变化时会再次执行</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;, [count])<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> 不要对 <code>useEffect</code> 的依赖项撒谎</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;点击了&#x27;</span> + count + <span class="hljs-string">&#x27;次&#x27;</span><br>  &#125;, [])<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>计数器：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>会在点击时没有效果产生</p><blockquote><p>useEffect完全指南：<a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/</a></p></blockquote><h3 id="清理副作用"><a href="#清理副作用" class="headerlink" title="清理副作用"></a>清理副作用</h3><p>在我们只想在 <code>React</code> 更新 DOM 之后运行一些额外的代码 ，比如 订阅外部数据源，开启定时器看，注册时间。。这种情况下，清除工作是非常重要的，可以防止内存泄露</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleResize</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, handleResize)<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, handleResize)<br>&#125;, [])<br></code></pre></td></tr></table></figure><p><code>effect</code> 回调函数的返回值，可选的，返回的是一个清理函数，用来执行事件解绑清理等操作</p><p><strong>执行时机</strong></p><ul><li>组件卸载之前</li><li>重新执行 <code>effect</code> 回调函数之前</li></ul><p>相当于 <code>componentDidMount</code>+  <code>componentWillUnmount </code></p><p>推荐：一个 <code>useEffect</code> 只处理一个功能，有多个功能时，使用多次 <code>useEffect</code> </p><p>优势：根据业务逻辑来拆分，相同功能的业务逻辑放在一起，而不是根据生命周期方法来拆分代码</p><h3 id="发送网络请求"><a href="#发送网络请求" class="headerlink" title="发送网络请求"></a>发送网络请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 是否取消本次请求</span><br>  <span class="hljs-keyword">let</span> didCancel = <span class="hljs-literal">false</span><br><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchMyAPI</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> url = <span class="hljs-string">&#x27;http://something/&#x27;</span> + productId<br>    <span class="hljs-keyword">let</span> config = &#123;&#125;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">myFetch</span>(url)<br>    <span class="hljs-comment">// 如果开启其他请求，就忽略本次（过时）的请求结果</span><br>    <span class="hljs-keyword">if</span> (!didCancel) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">fetchMyAPI</span>()<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123; didCancel = <span class="hljs-literal">true</span> &#125; <span class="hljs-comment">// 取消本次请求</span><br>&#125;, [productId])<br></code></pre></td></tr></table></figure><ul><li><code>effect</code> 只能是一个同步函数，不能使用 <code>async</code></li><li>因为 <code>effect</code> 的返回值应该是一个清理函数，<code>react</code> 会在组件卸载或者 <code>effect</code> 的依赖项变化时重新执行，但是如果 <code>effect</code> 是 <code>async</code> 的，此时返回值对象是 <code>promise</code> ，无法保证清理函数被立即调用</li><li>为了使用 <code>async/await</code> 语法，可以在 <code>effect</code> 内部创建 <code>async</code> 函数并调用</li></ul><p><strong>注意</strong></p><p>如果网络请求函数内访访问数据，可能会导致网络请求函数无线循环调用的问题，因为 <code>effect</code> 的执行是在数据发生更新时候去执行的</p><h2 id="自定义Hooks"><a href="#自定义Hooks" class="headerlink" title="自定义Hooks"></a>自定义Hooks</h2><p>除了使用内置 <code>Hooks</code> 之外，还可以创建自己的 <code>Hooks</code></p><p>作用：将组件状态逻辑提取到可重用的函数，实现状态逻辑复用</p><ul><li>自定义 <code>Hooks</code> 是一个函数， 约定函数名称必须以 <code>useX</code> 开头，<code>React</code> 通过函数名词是否以 <code>use</code> 开头来判断是不是 <code>hooks</code></li><li><code>Hooks</code> 只能在函数组件中或其它自定义 <code>Hooks</code> 中使用</li><li>自定义 <code>Hooks</code> 用来提取组件的状态逻辑，根据不同功能可以有不同的参数和返回值</li></ul><p><strong>将事件处理程序放在 useEffect 内部</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1 将 resize 事件处理程序放在 effect 回调中，当前这个代码是没有问题的</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleResize</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;window 窗口大小改变了&#x27;</span>)<br>  &#125;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, handleResize)<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, handleResize)<br>  &#125;<br>&#125;, [])<br><br><span class="hljs-comment">// 2 将 resize 事件处理程序拿到 useEffect 的外部，当前这个代码是没有问题的</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleResize</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;window 窗口大小改变了&#x27;</span>)<br>&#125;<br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, handleResize)<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, handleResize)<br>  &#125;<br>&#125;, [])<br><br><span class="hljs-comment">// 3 有依赖项的情况：</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// resize 事件的处理程序</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleResize</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;window 窗口大小改变了&#x27;</span>, count)<br>  &#125;<br><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, handleResize)<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, handleResize)<br>  &#125;<br>&#125;, [count])<br><br><br><span class="hljs-comment">// 注意：此处的代码，会给一些警告！！！ 不要按照这种方式写代码！！！</span><br><span class="hljs-comment">// 4 如果将 handleResize 放到了 useEffect 外部，React 会给以警告：</span><br><span class="hljs-comment">//   要么将 handleResize 放到 useEffect 中</span><br><span class="hljs-comment">//   要么使用 useCallback 这个 hook 来包裹 handleResize</span><br><span class="hljs-comment">// resize 事件的处理程序</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleResize</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;window 窗口大小改变了&#x27;</span>, count)<br>&#125;<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;useeffect 执行了&#x27;</span>)<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, handleResize)<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, handleResize)<br>  &#125;<br>&#125;, [handleResize])<br><br><span class="hljs-comment">// 总结以上几种情况，推荐：在给 window 绑定事件时，将 事件处理程序放在 useEffect 内部。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14-Redux</title>
    <link href="/React/14.Reudx/"/>
    <url>/React/14.Reudx/</url>
    
    <content type="html"><![CDATA[<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>状态管理工具</p><p><code>React</code> 全家桶</p><ul><li><code>react</code> 核心  -  <code>react hooks</code> </li><li><code>react-router</code> (react-router-dom)</li><li>状态管理 - mobx（简单）&#x2F; redux（复杂）</li><li>中间件：<code>redux-thunk</code> 、 <code>redux-saga</code></li></ul><h2 id="redux基本概念"><a href="#redux基本概念" class="headerlink" title="redux基本概念"></a>redux基本概念</h2><p><img src="/./redux.png"></p><p><strong>核心概念</strong> ：<code>store</code> 、<code>action</code> 、<code>reducer</code></p><ul><li><code>store</code> ：仓库(存储数据),  管理 <code>action</code> 和 <code>reducer</code></li><li><code>action</code> ：表示一个动作或者行为的抽象</li><li><code>reducer</code> ：根据  <code>action</code> 来对数据加工返回新数据</li></ul><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p><code>actions</code> 是任务的抽象，试图中的每个用户交互都是一个 <code>action</code> ，比如：添加任务、删除任务、登录、加入购物车灯</p><ul><li>本质上是一个 js 普通对象</li><li><code>action</code> 内必须使用一个字符串类型 <code>type</code> 的唯一标识</li><li><code>action</code> 如果数量过多，需要采用模块化的方式管理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span> action是一个js对象<br><span class="hljs-number">2.</span> action必须提供type属性，表示动作的类型<br><span class="hljs-number">3.</span> type属性的值是一个字符串，采用全大写字母表示，多个单词使用_连接<br>&#123;<br><span class="hljs-attr">type</span>: <span class="hljs-string">&quot;INCREMENT&quot;</span><br>&#125;<br><span class="hljs-number">4.</span> action中除了type，还可以指定动作需要的其他数据<br>&#123;<br><span class="hljs-attr">type</span>: <span class="hljs-string">&quot;ADD_TODO&quot;</span>,<br><span class="hljs-attr">todoName</span>: <span class="hljs-string">&#x27;学习redux&#x27;</span><br>&#125;<br><span class="hljs-number">5.</span> 将来要完成的所有功能，都抽象成了一个个的动作<br></code></pre></td></tr></table></figure><h3 id="action-creator"><a href="#action-creator" class="headerlink" title="action-creator"></a>action-creator</h3><p>用来创建 <code>action</code> 的函数，直接使用对象来创建 <code>action</code> 不灵活，参数写死. 一般使用函数来创建 <code>action</code> ，一般把创建 <code>action</code> 的函数叫做 <code>actionCreator</code></p><ul><li>action creator创建函数只是简单的返回一个 action</li><li>action creator创建函数的好处是更容易被移植和测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">delTodo</span> = (<span class="hljs-params">id</span>) =&gt; (&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;DEL_TODO&#x27;</span>, id &#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">delTodo</span>(<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p><code>reducer</code> 是一个 <code>纯函数</code> ，接收旧的 <code>state</code> 和 <code>action</code> ，返回新的 <code>state</code></p><ul><li><p><code>reducer</code>的<code>state</code>需要有一个默认值，这个默认值就是<code>redux</code>的初始值</p></li><li><p><code>reducer</code>内部需要判断<code>action</code>的<code>type</code>，根据<code>type</code>进行处理，处理的时候不能修改原来的数据</p></li><li><p><code>educer</code>如果遇到不认识的<code>type</code>，一定要返回原来的<code>state</code>(重要)</p></li></ul><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state = <span class="hljs-number">0</span>, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;ADD&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;MINUS&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state - <span class="hljs-number">1</span><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>纯函数</strong></p><p>特点：只要是固定的输入，必定是固定的输出</p><p>原则：</p><ul><li><p>不能改写参数</p></li><li><p>不能调用 <code>Date.now()</code> 等函数   </p></li><li><p>不能使用全局变量</p></li><li><p>没有副作用</p></li></ul><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><ul><li>getState</li><li>dispatch</li><li>subscribe 订阅</li></ul><p><code>store</code> 是把 <code>action</code> 、<code>reducer</code> 联系到一起的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// store</span><br> <span class="hljs-keyword">const</span> &#123; createStore &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Redux</span><br><span class="hljs-comment">// 参数1： reducer</span><br> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer)<br></code></pre></td></tr></table></figure><ul><li><p>通过 <code>getState()</code> 方法可以获取到 <code>state</code> 数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-property">innerHTML</span> = store.<span class="hljs-title function_">getState</span>()<br></code></pre></td></tr></table></figure></li><li><p>通过 <code>dispatch(action)</code>  方法可以派遣任务更新 <code>state</code> 数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.add&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">add</span>())<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过 <code>subscribe(listener)</code> 方法可以订阅数据的更新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 订阅：只要state发生了变化，这个订阅的回调函数就会执行。</span><br><span class="hljs-comment">// 返回值：调用了就会取消订阅</span><br><span class="hljs-keyword">const</span> unsubscribe = store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(store.<span class="hljs-title function_">getState</span>())<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-property">innerHTML</span> =store.<span class="hljs-title function_">getState</span>()<br>&#125;)<br><span class="hljs-title function_">unsubscribe</span>()<span class="hljs-comment">//停止监听</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><p>以上 <code>redux</code> 的使用和 <code>react</code> 是相互独立的 ，要配合 <code>react</code> 的使用需要使用到 <code>react-redux</code> 包</p><ul><li><p><code>react-redux</code></p></li><li><p><code>redux-devtools-extension</code></p></li><li><p><code>redux-thunk</code></p></li></ul><h3 id="不使用react-redux的使用"><a href="#不使用react-redux的使用" class="headerlink" title="不使用react-redux的使用"></a>不使用react-redux的使用</h3><p><code>action.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">count</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;ADD&#x27;</span>,<br>    count,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>reducers.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">addReducer</span> = (<span class="hljs-params"></span><br><span class="hljs-params">  state = &#123;</span><br><span class="hljs-params">    count: <span class="hljs-number">1</span>,</span><br><span class="hljs-params">  &#125;,</span><br><span class="hljs-params">  action</span><br><span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;ADD&#x27;</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, state, &#123; <span class="hljs-attr">count</span>: action.<span class="hljs-property">count</span> &#125;)<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>store\index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.js&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">import</span> &#123; addReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/reducers&quot;</span><br><span class="hljs-keyword">let</span> store = <span class="hljs-title function_">createStore</span>(addReducer)<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">App</span>&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#root&#x27;</span>))<br>store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">App</span>&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#root&#x27;</span>))<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>App.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; add &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/actions&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123;<br>    <span class="hljs-attr">store</span>: &#123; getState, dispatch &#125;,<br>  &#125; = props<br>  <span class="hljs-keyword">const</span> &#123; count &#125; = <span class="hljs-title function_">getState</span>()<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          dispatch(add(2))</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        点我+2</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><h3 id="使用-react-redux-包"><a href="#使用-react-redux-包" class="headerlink" title="使用 react-redux 包"></a>使用 react-redux 包</h3><p><code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建store</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducer&#x27;</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br><br></code></pre></td></tr></table></figure><p><code>reducers.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state = <span class="hljs-number">100</span>, action</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(action)<br>  <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;ADD&#x27;</span>) <span class="hljs-keyword">return</span> state + <span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;MINUS&#x27;</span>) <span class="hljs-keyword">return</span> state - <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> state<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> reducer<br><br></code></pre></td></tr></table></figure><p><code>App.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// react和redux没有关系</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Child&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>根组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我被点击了0次<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>src\index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDom</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">  react-redux的使用步骤</span><br><span class="hljs-comment">    1. 安装 yarn add react-redux</span><br><span class="hljs-comment">    2. 导入Provider组件 并且使用Provider组件包裹App组件</span><br><span class="hljs-comment">    3. 在任意的子组件中都可以获取到store</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title class_">ReactDom</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">App</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>)<br><br></code></pre></td></tr></table></figure><p><code>Child.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-keyword">import</span> &#123; add &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/action&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 调用useStore就可以得到store对象</span><br>  <span class="hljs-comment">// 调用useSelector 得到 store中数据</span><br>  <span class="hljs-comment">// const store = useStore()</span><br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state)<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>()<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是子组件---点击了&#123;count&#125;次<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(add())&#125;&gt;修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>重点步骤</strong></p><ul><li>使用 <code>&lt;Provider&gt;&lt;/Provider&gt;</code> 包裹 <code>&lt;App&gt;</code> 根组件为所有子组件提供 store</li><li><code>useStore</code>  获取 <code>store</code> 对象</li><li><code>useSelector</code>  获取 <code>state</code> 数据</li><li><code>useDispatch</code> 获取派遣任务的函数</li></ul><h2 id="redux处理异步"><a href="#redux处理异步" class="headerlink" title="redux处理异步"></a>redux处理异步</h2><p><code>redux-thunk</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createStore,applyMiddleware&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducer&#x27;</span><br><span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-thunk&#x27;</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer,<span class="hljs-title function_">applyMiddleware</span>(thunk))<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//如果是同步的 action , 直接返回一个 action 对象</span><br><span class="hljs-comment">//如果是异步的 aciton , 需要返回一个异步的函数 , 在异步函数中，处理完之后 , 需要在异步函数中 dispatch</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">buy</span> = (<span class="hljs-params">money</span>) =&gt;&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;BUY&#x27;</span>,<br>    money,<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">buyAsync</span> = (<span class="hljs-params">money</span>) =&gt;&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">dispatch</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">buy</span>(money))&#125;,<span class="hljs-number">3000</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用</strong></p><p><code>&lt;button onClick=&#123;()=&gt;dispatch(buyAsync(300))&#125;&gt;&lt;/button&gt;</code></p><h2 id="分离变量名"><a href="#分离变量名" class="headerlink" title="分离变量名"></a>分离变量名</h2><ul><li>新建 <code>action_type.js</code> 文件</li><li>在文件中 <code>const ADD_MONEY = &#39;ADD_MONEY&#39;</code>   声明变量</li><li><code>export</code> 导出   <code>import &#123;&#125;</code> 导入</li><li>使用更加方便管理</li></ul><h2 id="多个reducer合并"><a href="#多个reducer合并" class="headerlink" title="多个reducer合并"></a>多个reducer合并</h2><p><code>combineReducers(reducers)</code></p><p>在 <code>reducers</code> 文件下有多个 <code>reducer</code> 需要导入给 <code>store</code> 使用 ，需要使用到这个合并的 API . </p><p>a</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">state = &#123;name:<span class="hljs-string">&#x27;y&#x27;</span>,age:<span class="hljs-number">20</span>&#125;,action</span>)&#123;<br>  <span class="hljs-keyword">return</span> state<br>&#125;<br></code></pre></td></tr></table></figure><p>b</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">money</span>(<span class="hljs-params">state = <span class="hljs-number">100</span>,action</span>)&#123;<br>  <span class="hljs-keyword">return</span> state<br>&#125;<br></code></pre></td></tr></table></figure><p>合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> rootReducer = <span class="hljs-title function_">combineReducers</span>(&#123;<br>  <span class="hljs-attr">a</span>:user,<br>  <span class="hljs-attr">b</span>:money<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> rootReducer<br></code></pre></td></tr></table></figure><p> <strong>使用</strong></p><p><code>const money = useSelector((state)=&gt;state.money)</code></p><p><code>const user= useSelector((state)=&gt;state.user)</code></p><h2 id="redux开发工具"><a href="#redux开发工具" class="headerlink" title="redux开发工具"></a>redux开发工具</h2><ul><li>浏览器安装 <code>react-redux</code> 开发工具</li><li>安装和导入 <code>redux-devtools-extension</code> 包</li></ul><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;composeWithDevTools&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-devtools-extension&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer,<span class="hljs-title function_">composeWithDevTools</span>(<span class="hljs-title function_">applyMiddleware</span>(thunk)))<br></code></pre></td></tr></table></figure><p>配置好后可以在浏览器中打开</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15-函数组件特性</title>
    <link href="/React/15.react%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6/"/>
    <url>/React/15.react%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="函数组件特性"><a href="#函数组件特性" class="headerlink" title="函数组件特性"></a>函数组件特性</h2><p>React 中的函数组件是通过函数来实现的，函数组件的公式上: <code>f(state)=&gt;UI</code> , 即：数据到视图的映射</p><p><code>函数组件</code> 因为是通过函数实现的，所以在使用函数组件时就会有函数的特性</p><ul><li>对于函数组件来说，每次状态更新后，组件都会重新渲染</li><li>每次组件更新都会记录某个特定时刻的状态，快照</li><li>组件每次特定渲染，都有自己的 <code>props/state/事件处理程序</code></li><li><code>快照</code> ，从代码层面来说，是通过 <code>JS</code> 中函数的闭包机制来实现的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> [count,setCount] =<span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">showCount</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;count:&#x27;</span>,count)<br>    &#125;,<span class="hljs-number">3000</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span> = <span class="hljs-string">&#123;()</span>=&gt;</span>&#123;setCount(count+1)&#125;&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span> = <span class="hljs-string">&#123;showCount&#125;</span>&gt;</span>获取3秒后count值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>因为闭包机制作用下，在获取 <code>3s</code> 的count值获取到的值为 <code>0</code> 因为是异步操作，所以在获取其 <code>count</code> 值还是修改其 <code>count</code> 值都是拿到依赖的原始值</p><p>在 <code>react</code> 项目中 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setTimes</span>(<span class="hljs-number">60</span>)<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 闭包下times拿到的数据为函数外部记录的0值</span><br>  <span class="hljs-title function_">setTimes</span>(times - <span class="hljs-number">1</span>)<br>&#125;, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>因为不是同步的，每次执行的定时器任务拿取到的 <code>times</code> 值都是0 </p><p><code>setTimes(60)</code> 这个函数执行机制也类似于异步，所以拿到的数据可能还是初始值</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setTimes</span>(<span class="hljs-function">(<span class="hljs-params">times</span>) =&gt;</span> times - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>使用 <code>setTimes</code> 函数的一种写法 ，保证每次获取到的 <code>times</code> 是最新值，而不是外部依赖</p><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p><strong>使用外部全局变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">showCount</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;count:&#x27;</span>, num)<br>    &#125;, <span class="hljs-number">3000</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setCount(count + 1)</span><br><span class="language-xml">          num = count + 1</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        +1</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;showCount&#125;</span>&gt;</span>获取3秒后count值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>缺点是两个相同组件作用下，会有影响（两个组件会使用同一个全局变量）</p><p>**使用 useRef() **</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> aRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">showCount</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;count:&#x27;</span>, aRef.<span class="hljs-property">current</span>)<br>    &#125;, <span class="hljs-number">3000</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;aRef.current&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setCount(count + 1)</span><br><span class="language-xml">          aRef.current = count + 1</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        +1</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;showCount&#125;</span>&gt;</span>获取3秒后count值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
